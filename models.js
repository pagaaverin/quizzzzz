const inquirer = require("inquirer");
const play = require("play-sound")();
const fs = require("fs");
const chalk = require("chalk");

const AnswerCoctails = fs
  .readFileSync("./topics/coctailsname.txt", "utf-8")
  .split("\n")
  .map((el) => el.split(","));

const questionCostails = fs
  .readFileSync("./topics/coctailsquestion.txt", "utf-8")
  .split("\n");

const AnswerInvest = fs
  .readFileSync("./topics/–æ—Ç–≤–µ—Ç—ã.txt", "utf-8")
  .split("\n")
  .map((el) => el.split(","));

const questionInvest = fs
  .readFileSync("./topics/–≤–æ–ø—Ä–æ—Å—ã.txt", "utf-8")
  .split("\n");

function createQuestion(listQuest, listAnswer) {
  const questions = [];

  for (let i = 0; i < listQuest.length; i++) {
    questions.push({
      type: "list",
      name: `${i}`,
      message: listQuest[i],
      choices: listAnswer[i],
      validate: (input) =>
        input ? true : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
    });
  }
  return questions;
}
function createQuestion(listQuest, listAnswer) {
  const questions = [];

  for (let i = 0; i < listQuest.length; i++) {
    questions.push({
      type: "list",
      name: `${i}`,
      message: listQuest[i],
      choices: listAnswer[i],
      validate: (input) =>
        input ? true : "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.",
    });
  }
  return questions;
}

function askCoctailsQuestions(index = 0) {
  const questions = createQuestion(questionCostails, AnswerCoctails);
  const correctAnswers = {
    0: "–ú–∞–π-–¢–∞–π",
    1: "–ù–µ–≥—Ä–æ–Ω–∏",
    2: "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞",
    3: "–û–ª–¥-–§–µ—à–Ω",
    4: "–ë–µ–ª—ã–π-–†—É—Å—Å–∫–∏–π",
  };

  if (index < questions.length) {
    play.play(`./music/icebaby.mp3`);

    inquirer.prompt([questions[index]]).then((answers) => {
      const questionKey = Object.keys(answers)[0];
      const userAnswer = answers[questionKey];
      const correctAnswer = correctAnswers[questionKey];

      if (userAnswer.toLowerCase() === correctAnswer.toLowerCase()) {
        console.log(chalk.green("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!‚úÖ"));
      } else {
        console.log(
          chalk.red(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Çüö´. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}`)
        );
      }

      askCoctailsQuestions(index + 1);
    });
  } else {
    console.log("–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!üî•");
    chooseCategory();
  }
}
function askInvestQuestions(index = 0) {
  const questions = createQuestion(questionInvest, AnswerInvest);
  const correctAnswers = {
    0: " 17%",
    1: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ",
    2: " –∞–∫—Ü–∏–∏",
    3: " –æ–¥–Ω—É –∞–∫—Ü–∏—é",
    4: " –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ —á–∞—Å—Ç–æ –ø–æ–¥–≤–µ—Ä–∂–µ–Ω–Ω—ã—Ö —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Ä–µ–∞–∫—Ü–∏—è–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω –∞–∫—Ü–∏–π –∏ —á–∞—Å—Ç–æ –¥–µ–ª–∞—é—â–∏—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª—É—Ö–æ–≤ –∏–ª–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π",
  };

  if (index < questions.length) {
    play.play(`./music/zvuk.mp3`);
    inquirer.prompt([questions[index]]).then((answers) => {
      const questionKey = Object.keys(answers)[0];
      const userAnswer = answers[questionKey];
      const correctAnswer = correctAnswers[questionKey];

      if (userAnswer.toLowerCase() === correctAnswer.toLowerCase()) {
        console.log(chalk.green("–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!‚úÖ"));
      } else {
        console.log(
          chalk.red(`–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Çüö´. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correctAnswer}`)
        );
      }

      askInvestQuestions(index + 1);
    });
  } else {
    console.log("–í–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å. –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!üî•");
    chooseCategory();
  }
}
let categoriesCompleted = {};
function chooseCategory() {
  if (Object.keys(categoriesCompleted).length === 2) {
    console.log("–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!");
    return;
  }
  const categories = ["–ö–æ–∫—Ç–µ–π–ª–∏", "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏"];
  const choices = categories.map((category) => {
    if (categoriesCompleted[category]) {
      return `${category} (—É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ)`; // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –∫ –Ω–∞–∑–≤–∞–Ω–∏—é
    }
    return category;
  });
  inquirer
    .prompt([
      {
        type: "list",
        name: "category",
        message: "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–æ–≤:",
        choices: choices,
      },
    ])
    .then((answers) => {
      const selectedCategory = answers.category.replace(" (—É–∂–µ –ø—Ä–æ–π–¥–µ–Ω–æ)", "");
      if (categoriesCompleted[selectedCategory]) {
        console.log(`–ö–∞—Ç–µ–≥–æ—Ä–∏—è "${selectedCategory}" —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–π–¥–µ–Ω–∞.`);
        chooseCategory();
      } else {
        switch (selectedCategory) {
          case "–ö–æ–∫—Ç–µ–π–ª–∏":
            askCoctailsQuestions();
            categoriesCompleted[selectedCategory] = true;
            break;
          case "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏":
            askInvestQuestions();
            categoriesCompleted[selectedCategory] = true;
            break;
          default:
            console.log("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –≤—ã–±—Ä–∞–Ω–∞");
            break;
        }
      }
    });
}

chooseCategory();
